{"version":3,"file":"workbox-window.dev.es5.mjs","sources":["../_version.mjs","../messageSW.mjs","../../workbox-core/_version.mjs","../../workbox-core/_private/Deferred.mjs","../../workbox-core/_private/logger.mjs","../utils/EventTargetShim.mjs","../utils/urlsMatch.mjs","../utils/WorkboxEvent.mjs","../Workbox.mjs","../index.mjs"],"sourcesContent":["try{self['workbox:window:4.0.0-rc.2']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport './_version.mjs';\n\n\n/**\n * Sends a data object to a service worker via `postMessage` and resolves\n * and resolves with a response (if any).\n *\n * A response can be set in a message handler in the service worker by\n * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n * returned by `messageSW()`. If no response is set, the promise will not\n * resolve.\n *\n * @param {ServiceWorker} sw The service worker to send the message to.\n * @param {Object} data An object to send to the service worker.\n * @return {Promise<Object|undefined>}\n *\n * @memberof module:workbox-window\n */\nconst messageSW = (sw, data) => {\n  return new Promise((resolve) => {\n    let messageChannel = new MessageChannel();\n    messageChannel.port1.onmessage = (evt) => resolve(evt.data);\n    sw.postMessage(data, [messageChannel.port2]);\n  });\n};\n\nexport {messageSW};\n","try{self['workbox:core:4.0.0-rc.2']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nexport class Deferred {\n  /**\n   * Creates a promise and exposes its resolve and reject functions as methods.\n   */\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\nconst logger = process.env.NODE_ENV === 'production' ? null : (() => {\n  let inGroup = false;\n\n  const methodToColorMap = {\n    debug: `#7f8c8d`, // Gray\n    log: `#2ecc71`, // Green\n    warn: `#f39c12`, // Yellow\n    error: `#c0392b`, // Red\n    groupCollapsed: `#3498db`, // Blue\n    groupEnd: null, // No colored prefix on groupEnd\n  };\n\n  const print = function(method, args) {\n    if (method === 'groupCollapsed') {\n      // Safari doesn't print all console.groupCollapsed() arguments:\n      // https://bugs.webkit.org/show_bug.cgi?id=182754\n      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        console[method](...args);\n        return;\n      }\n    }\n\n    const styles = [\n      `background: ${methodToColorMap[method]}`,\n      `border-radius: 0.5em`,\n      `color: white`,\n      `font-weight: bold`,\n      `padding: 2px 0.5em`,\n    ];\n\n    // When in a group, the workbox prefix is not displayed.\n    const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n\n    console[method](...logPrefix, ...args);\n\n    if (method === 'groupCollapsed') {\n      inGroup = true;\n    }\n    if (method === 'groupEnd') {\n      inGroup = false;\n    }\n  };\n\n  const api = {};\n  for (const method of Object.keys(methodToColorMap)) {\n    api[method] = (...args) => {\n      print(method, args);\n    };\n  }\n\n  return api;\n})();\n\nexport {logger};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nclass EventTargetShim {\n  /**\n   * Creates an event listener registry\n   */\n  constructor() {\n    // A registry of event types to listeners.\n    this._eventListenerRegistry = {};\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   */\n  addEventListener(type, listener) {\n    this._getEventListenersByType(type).add(listener);\n  }\n\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   */\n  removeEventListener(type, listener) {\n    this._getEventListenersByType(type).remove(listener);\n  }\n\n  /**\n   * @param {Event} event\n   */\n  dispatchEvent(event) {\n    event.target = this;\n    this._getEventListenersByType(event.type).forEach(\n        (listener) => listener(event));\n  }\n\n  /**\n   * Returns a Set of listeners associated with the passed event type.\n   * If no handlers have been registered, an empty Set is returned.\n   *\n   * @param {string} type The event type.\n   * @return {Set} An array of handler functions.\n   */\n  _getEventListenersByType(type) {\n    return this._eventListenerRegistry[type] =\n        (this._eventListenerRegistry[type] || new Set());\n  }\n}\n\nexport {EventTargetShim};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * Returns true if two URLs have the same `.href` property. The URLS can be\n * relative, and if they are the current location href is used to resolve URLs.\n *\n * @private\n * @param {string} url1\n * @param {string} url2\n * @return {boolean}\n */\nconst urlsMatch = (url1, url2) => {\n  return new URL(url1, location).href === new URL(url2, location).href;\n};\n\nexport {urlsMatch};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n/**\n * A minimal `Event` subclass shim.\n * This doesn't *actually* subclass `Event` because not all browsers support\n * constructable `EventTarget`, and using a real `Event` will error.\n * @private\n */\nclass WorkboxEvent {\n  /**\n   * @param {string} type\n   * @param {Object} props\n   */\n  constructor(type, props) {\n    Object.assign(this, props, {type});\n  }\n}\n\nexport {WorkboxEvent};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Deferred} from 'workbox-core/_private/Deferred.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {messageSW} from './messageSW.mjs';\nimport {EventTargetShim} from './utils/EventTargetShim.mjs';\nimport {urlsMatch} from './utils/urlsMatch.mjs';\nimport {WorkboxEvent} from './utils/WorkboxEvent.mjs';\nimport './_version.mjs';\n\n\n// The time a SW must be in the waiting phase before we can conclude\n// `skipWaiting()` wasn't called. This 200 amount wasn't scientifically\n// chosen, but it seems to avoid false positives in my testing.\nconst WAITING_TIMEOUT_DURATION = 200;\n\n// The amount of time after a registration that we can reasonably conclude\n// that the registration didn't trigger an update.\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\n\n/**\n * A class to aid in handling service worker registration, updates, and\n * reacting to service worker lifecycle events.\n *\n * @memberof module:workbox-window\n */\nclass Workbox extends EventTargetShim {\n  /**\n   * Creates a new Workbox instance with a script URL and service worker\n   * options. The script URL and options are the same as those used when\n   * calling `navigator.serviceWorker.register(scriptURL, options)`. See:\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   *\n   * @param {string} scriptURL The service worker script associated with this\n   *     instance.\n   * @param {Object} [registerOptions] The service worker options associated\n   *     with this instance.\n   */\n  constructor(scriptURL, registerOptions = {}) {\n    super();\n\n    this._scriptURL = scriptURL;\n    this._registerOptions = registerOptions;\n    this._updateFoundCount = 0;\n\n    // Deferreds we can resolve later.\n    this._swDeferred = new Deferred();\n    this._activeDeferred = new Deferred();\n    this._controllingDeferred = new Deferred();\n\n    // Bind event handler callbacks.\n    this._onMessage = this._onMessage.bind(this);\n    this._onStateChange = this._onStateChange.bind(this);\n    this._onUpdateFound = this._onUpdateFound.bind(this);\n    this._onControllerChange = this._onControllerChange.bind(this);\n  }\n\n  /**\n   * Registers a service worker for this instances script URL and service\n   * worker options. By default this method delays registration until after\n   * the window has loaded.\n   *\n   * @param {Object} [options]\n   * @param {Function} [options.immediate=false] Setting this to true will\n   *     register the service worker immediately, even if the window has\n   *     not loaded (not recommended).\n   */\n  async register({immediate = false} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._registrationTime) {\n        logger.error('Cannot re-register a Workbox instance after it has ' +\n            'been registered. Create a new instance instead.');\n        return;\n      }\n    }\n\n    if (!immediate && document.readyState !== 'complete') {\n      await new Promise((res) => addEventListener('load', res));\n    }\n\n    // Before registering, attempt to determine if a SW is already controlling\n    // the page, and if that SW script (and version, if specified) matches this\n    // instance's script.\n    this._compatibleControllingSW = this._getControllingSWIfCompatible();\n\n    this._registration = await this._registerScript();\n\n    // Only resolve deferreds now if we know we have a compatible controller.\n    if (this._compatibleControllingSW) {\n      this._sw = this._compatibleControllingSW;\n      this._swDeferred.resolve(this._compatibleControllingSW);\n      this._activeDeferred.resolve(this._compatibleControllingSW);\n      this._controllingDeferred.resolve(this._compatibleControllingSW);\n\n      this._reportWindowReady(this._compatibleControllingSW);\n      this._compatibleControllingSW.addEventListener(\n          'statechange', this._onStateChange, {once: true});\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log('Successfully registered service worker.', this._scriptURL);\n\n      if (navigator.serviceWorker.controller) {\n        if (this._compatibleControllingSW) {\n          logger.debug('A service worker with the same script URL ' +\n              'is already controlling this page.');\n        } else {\n          logger.debug('A service worker with a different script URL is ' +\n              'currently controlling the page. The browser is now fetching ' +\n              'the new script now...');\n        }\n      }\n\n      // If there's an active and waiting service worker before the\n      // `updatefound` event fires, it means there was a waiting service worker\n      // in the queue before this one was registered.\n      if (this._registration.waiting && this._registration.active) {\n        logger.warn('A service worker was already waiting to activate ' +\n            'before this script was registered...');\n      }\n\n      const currentPageIsOutOfScope = () => {\n        const scopeURL = new URL(\n            this._registerOptions.scope || this._scriptURL, document.baseURI);\n        const scopeURLBasePath = new URL('./', scopeURL.href).pathname;\n        return !location.pathname.startsWith(scopeURLBasePath);\n      };\n      if (currentPageIsOutOfScope()) {\n        logger.warn('The current page is not in scope for the registered ' +\n            'service worker. Was this a mistake?');\n      }\n    }\n\n    this._registration.addEventListener('updatefound', this._onUpdateFound);\n    navigator.serviceWorker.addEventListener(\n        'controllerchange', this._onControllerChange, {once: true});\n\n    // Add message listeners.\n    if ('BroadcastChannel' in self) {\n      this._broadcastChannel = new BroadcastChannel('workbox');\n      this._broadcastChannel.addEventListener('message', this._onMessage);\n    }\n    navigator.serviceWorker.addEventListener('message', this._onMessage);\n\n    return this._registration;\n  }\n\n  /**\n   * Resolves to the service worker registered by this instance as soon as it\n   * is active. If a service worker was already controlling at registration\n   * time then it will resolve to that if the script URLs (and optionally\n   * script versions) match, otherwise it will wait until an update is found\n   * and activates.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n  get active() {\n    return this._activeDeferred.promise;\n  }\n\n  /**\n   * Resolves to the service worker registered by this instance as soon as it\n   * is controlling the page. If a service worker was already controlling at\n   * registration time then it will resolve to that if the script URLs (and\n   * optionally script versions) match, otherwise it will wait until an update\n   * is found and starts controlling the page.\n   * Note: the first time a service worker is installed it will active but\n   * not start controlling the page unless `clients.claim()` is called in the\n   * service worker.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n  get controlling() {\n    return this._controllingDeferred.promise;\n  }\n\n  /**\n   * Resolves with a reference to a service worker that matches the script URL\n   * of this instance, as soon as it's available.\n   *\n   * If, at registration time, there’s already an active service worker with a\n   * matching script URL, that will be what is resolved. If there’s no active\n   * and matching service worker at registration time then the promise will\n   * not resolve until an update is found and starts installing, at which\n   * point the installing service worker is resolved.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n  async getSW() {\n    return this._swDeferred.promise;\n  }\n\n  /**\n   * Sends the passed data object to the service worker registered by this\n   * instance and resolves with a response (if any).\n   *\n   * A response can be set in a message handler in the service worker by\n   * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n   * returned by `messageSW()`. If no response is set, the promise will never\n   * resolve.\n   *\n   * @param {Object} data An object to send to the service worker\n   * @return {Promise<Object>}\n   */\n  async messageSW(data) {\n    const sw = await this.getSW();\n    return new Promise((resolve) => {\n      let messageChannel = new MessageChannel();\n      messageChannel.port1.onmessage = (evt) => resolve(evt.data);\n      sw.postMessage(data, [messageChannel.port2]);\n    });\n  }\n\n  /**\n   * Checks for a service worker already controlling the page and returns\n   * it if its script URL (and optionally script version) match. The\n   * script version is determined by sending a message to the controlling\n   * service worker and waiting for a response. If no response is returned\n   * the service worker is assumed to not have a version.\n   *\n   * @private\n   * @return {ServiceWorker|undefined}\n   */\n  _getControllingSWIfCompatible() {\n    const controller = navigator.serviceWorker.controller;\n\n    if (controller && urlsMatch(controller.scriptURL, this._scriptURL)) {\n      // If the URLs match and no script version is specified, assume the\n      // SW is the same. NOTE: without a script version, this isn't a\n      // particularly good test. Using a script version is encouraged if\n      // you need to send messages to your service worker on all page loads.\n      return controller;\n    }\n  }\n\n  /**\n   * Registers a service worker for this instances script URL and register\n   * options and tracks the time registration was complete.\n   *\n   * @private\n   */\n  async _registerScript() {\n    try {\n      const reg = await navigator.serviceWorker.register(\n          this._scriptURL, this._registerOptions);\n\n      // Keep track of when registration happened, so it can be used in the\n      // `this._onUpdateFound` heuristic. Also use the presence of this\n      // property as a way to see if `.register()` has been called.\n      this._registrationTime = performance.now();\n\n      return reg;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.error(error);\n      }\n      // Re-throw the error.\n      throw error;\n    }\n  }\n\n\n  /**\n   * Sends a message to the passed service worker that the window is ready.\n   *\n   * @param {ServiceWorker} sw\n   * @private\n   */\n  _reportWindowReady(sw) {\n    messageSW(sw, {\n      type: 'WINDOW_READY',\n      meta: 'workbox-window',\n    });\n  }\n\n  /**\n   * @private\n   */\n  _onUpdateFound() {\n    const installingSW = this._registration.installing;\n\n    // If the script URL passed to `navigator.serviceWorker.register()` is\n    // different from the current controlling SW's script URL, we know any\n    // successful registration calls will trigger an `updatefound` event.\n    // But if the registered script URL is the same as the current controlling\n    // SW's script URL, we'll only get an `updatefound` event if the file\n    // changed since it was last registered. This can be a problem if the user\n    // opens up the same page in a different tab, and that page registers\n    // a SW that triggers an update. It's a problem because this page has no\n    // good way of knowing whether the `updatefound` event came from the SW\n    // script it registered or from a registration attempt made by a newer\n    // version of the page running in another tab.\n    // To minimize the possibility of a false positive, we use the logic here:\n    let updateLikelyTriggeredExternally =\n        // Since we enforce only calling `register()` once, and since we don't\n        // add the `updatefound` event listener until the `register()` call, if\n        // `_updateFoundCount` is > 0 then it means this method has already\n        // been called, thus this SW must be external\n        this._updateFoundCount > 0 ||\n        // If the script URL of the installing SW is different from this\n        // instance's script URL, we know it's definitely not from our\n        // registration.\n        !urlsMatch(installingSW.scriptURL, this._scriptURL) ||\n        // If all of the above are false, then we use a time-based heuristic:\n        // Any `updatefound` event that occurs long after our registration is\n        // assumed to be external.\n        (performance.now() >\n            this._registrationTime + REGISTRATION_TIMEOUT_DURATION) ?\n                // If any of the above are not true, we assume the update was\n                // triggered by this instance.\n                true : false;\n\n    if (updateLikelyTriggeredExternally) {\n      this._externalSW = installingSW;\n      this._registration.removeEventListener(\n          'updatefound', this._onUpdateFound);\n    } else {\n      // If the update was not triggered externally we know the installing\n      // SW is the one we registered, so we set it.\n      this._sw = installingSW;\n      this._swDeferred.resolve(installingSW);\n\n      // The `installing` state isn't something we have a dedicated\n      // callback for, but we do log messages for it in development.\n      if (process.env.NODE_ENV !== 'production') {\n        if (navigator.serviceWorker.controller) {\n          logger.log('Updated service worker found. Installing now...');\n        } else {\n          logger.log('Service worker is installing...');\n        }\n      }\n    }\n\n    // Increment the `updatefound` count, so future invocations of this\n    // method can be sure they were triggered externally.\n    ++this._updateFoundCount;\n\n    // Add a `statechange` listener regardless of whether this update was\n    // triggered externally, since we have callbacks for both.\n    installingSW.addEventListener('statechange', this._onStateChange);\n  }\n\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n  _onStateChange(originalEvent) {\n    const sw = originalEvent.target;\n    const {state} = sw;\n    const isExternal = sw === this._externalSW;\n    const eventPrefix = isExternal ? 'external' : '';\n\n    this.dispatchEvent(new WorkboxEvent(\n        eventPrefix + state, {sw, originalEvent}));\n\n    if (state === 'installed') {\n      // This timeout is used to ignore cases where the service worker calls\n      // `skipWaiting()` in the install event, thus moving it directly in the\n      // activating state. (Since all service workers *must* go through the\n      // waiting phase, the only way to detect `skipWaiting()` called in the\n      // install event is to observe that the time spent in the waiting phase\n      // is very short.)\n      // NOTE: we don't need separate timeouts for the own and external SWs\n      // since they can't go through these phases at the same time.\n      this._waitingTimeout = setTimeout(() => {\n        // Ensure the SW is still waiting (it may now be redundant).\n        if (state === 'installed' && this._registration.waiting === sw) {\n          this.dispatchEvent(new WorkboxEvent(\n              eventPrefix + 'waiting', {sw, originalEvent}));\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (isExternal) {\n              logger.warn('An external service worker has installed but is ' +\n                  'waiting for this client to close before activating...');\n            } else {\n              logger.warn('The service worker has installed but is waiting ' +\n                  ' for existing clients to close before activating...');\n            }\n          }\n        }\n      }, WAITING_TIMEOUT_DURATION);\n    } else if (state === 'activating') {\n      clearTimeout(this._waitingTimeout);\n      if (!isExternal) {\n        this._activeDeferred.resolve(sw);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      switch (state) {\n        case 'installed':\n          if (isExternal) {\n            logger.warn('An external service worker has installed. ' +\n                'You may want to suggest users reload this page.');\n          } else {\n            logger.log('Registered service worker installed.');\n          }\n          break;\n        case 'activated':\n          if (isExternal) {\n            logger.warn('An external service worker has activated.');\n          } else {\n            logger.log('Registered service worker activated.');\n            if (sw !== navigator.serviceWorker.controller) {\n              logger.warn('The registered service worker is active but ' +\n                  'not yet controlling the page. Reload or run ' +\n                  '`clients.claim()` in the service worker.');\n            }\n          }\n          break;\n        case 'redundant':\n          if (!isExternal) {\n            logger.log('Registered service worker now redundant!');\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n  _onControllerChange(originalEvent) {\n    const sw = this._sw;\n    if (sw === navigator.serviceWorker.controller) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered service worker now controlling this page.');\n      }\n      this.dispatchEvent(new WorkboxEvent('controlling', {sw, originalEvent}));\n      this._controllingDeferred.resolve(sw);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n  _onMessage(originalEvent) {\n    const {data} = originalEvent;\n    this.dispatchEvent(new WorkboxEvent('message', {data, originalEvent}));\n  }\n}\n\nexport {Workbox};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {messageSW} from './messageSW.mjs';\nimport {Workbox} from './Workbox.mjs';\nimport './_version.mjs';\n\n\n/**\n * @module workbox-window\n */\nexport {\n  Workbox,\n  messageSW,\n};\n"],"names":["self","_","e","messageSW","sw","data","Promise","resolve","messageChannel","MessageChannel","port1","onmessage","evt","postMessage","port2","Deferred","promise","reject","logger","process","inGroup","methodToColorMap","debug","log","warn","error","groupCollapsed","groupEnd","print","method","args","test","navigator","userAgent","console","styles","logPrefix","join","api","Object","keys","EventTargetShim","_eventListenerRegistry","addEventListener","type","listener","_getEventListenersByType","add","removeEventListener","remove","dispatchEvent","event","target","forEach","Set","urlsMatch","url1","url2","URL","location","href","WorkboxEvent","props","assign","body","recover","result","then","f","i","arguments","length","apply","value","direct","WAITING_TIMEOUT_DURATION","REGISTRATION_TIMEOUT_DURATION","Workbox","scriptURL","registerOptions","_scriptURL","_registerOptions","_updateFoundCount","_swDeferred","_activeDeferred","_controllingDeferred","_onMessage","bind","_onStateChange","_onUpdateFound","_onControllerChange","register","immediate","_registrationTime","document","readyState","res","_compatibleControllingSW","_getControllingSWIfCompatible","_registerScript","_registration","_sw","_reportWindowReady","once","serviceWorker","controller","waiting","active","currentPageIsOutOfScope","scopeURL","scope","baseURI","scopeURLBasePath","pathname","startsWith","_broadcastChannel","BroadcastChannel","getSW","reg","performance","now","meta","installingSW","installing","updateLikelyTriggeredExternally","_externalSW","originalEvent","state","isExternal","eventPrefix","_waitingTimeout","setTimeout","clearTimeout"],"mappings":"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"}